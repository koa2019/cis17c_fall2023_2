 #include <iostream> 
using namespace std;

class LinkedList {
private:
    struct Link {
        int data;       // Some type of data
        Link* lnkNext;  // Next Link in the chain
    };

    Link* head;

public:
    LinkedList() : head(nullptr) {}

    // Push an element to the front
    void push_front(int value) {
        Link* newLink = new Link;
        newLink->data = value;
        newLink->lnkNext = head;
        head = newLink;
    }

    // Push an element to the back
    void push_back(int value) {
        Link* newLink = new Link;
        newLink->data = value;
        newLink->lnkNext = nullptr;

        if (!head) {
            head = newLink;
        } else {
            Link* current = head;
            while (current->lnkNext) {
                current = current->lnkNext;
            }
            current->lnkNext = newLink;
        }
    }

    // Pop an element from the front
    void pop_front() {
        if (head) {
            Link* temp = head;
            head = head->lnkNext;
            delete temp;
        }
    }

    // Pop an element from the back
    void pop_back() {
        if (head) {
            if (!head->lnkNext) {
                delete head;
                head = nullptr;
            } else {
                Link* current = head;
                while (current->lnkNext && current->lnkNext->lnkNext) {
                    current = current->lnkNext;
                }
                delete current->lnkNext;
                current->lnkNext = nullptr;
            }
        }
    }

    // Print the linked list
    void prntLst() {
        Link* current = head;
        while (current) {
            cout << current->data << endl;
            current = current->lnkNext;
        }
    }

    // Destroy the linked list
    void dstryLst() {
        while (head) {
            pop_front();
        }
    }

    ~LinkedList() {
        dstryLst();
    }
};

int main(int argc, char** argv) {
    LinkedList lst;

    lst.push_back(1);
    lst.push_back(2);
    lst.push_back(3);
    lst.push_back(4);
    lst.push_back(5);

    lst.prntLst();

    lst.pop_front();
    lst.pop_back();

    cout << "After removing front and back:" << endl;
    lst.prntLst();

    return 0;
} 